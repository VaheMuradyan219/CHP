using System;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Security.Cryptography;
using System.Text;

class UtilityMenu
{
    static void Main()
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine("===================================");
            Console.WriteLine("      Windows Utility Menu");
            Console.WriteLine("===================================");
            Console.WriteLine("1. Display IP Addresses (IPv4 and IPv6)");
            Console.WriteLine("2. Perform Traceroute");
            Console.WriteLine("3. Resolve DNS Name");
            Console.WriteLine("4. Encrypt Text (Caesar Cipher)");
            Console.WriteLine("5. Decrypt Text (Caesar Cipher)");
            Console.WriteLine("6. Compress File (ZIP)");
            Console.WriteLine("7. Decompress File (ZIP)");
            Console.WriteLine("8. Calculate Hash for File");
            Console.WriteLine("0. Exit");
            Console.WriteLine("===================================");
            Console.Write("Select an option: ");

            switch (Console.ReadLine())
            {
                case "1":
                    DisplayIPAddresses();
                    break;
                case "2":
                    PerformTraceroute();
                    break;
                case "3":
                    ResolveDNSName();
                    break;
                case "4":
                    EncryptText();
                    break;
                case "5":
                    DecryptText();
                    break;
                case "6":
                    CompressFile();
                    break;
                case "7":
                    DecompressFile();
                    break;
                case "8":
                    CalculateFileHash();
                    break;
                case "0":
                    return;
                default:
                    Console.WriteLine("Invalid option. Try again.");
                    break;
            }
        }
    }

    static void DisplayIPAddresses()
    {
        Console.Clear();
        foreach (var networkInterface in NetworkInterface.GetAllNetworkInterfaces())
        {
            foreach (var address in networkInterface.GetIPProperties().UnicastAddresses)
            {
                Console.WriteLine(address.Address);
            }
        }
        Pause();
    }

    static void PerformTraceroute()
    {
        Console.Clear();
        Console.Write("Enter the hostname or IP address: ");
        string target = Console.ReadLine();
        Console.WriteLine("Performing traceroute is not natively supported in C#. Use a tool like 'tracert' command.");
        Pause();
    }

    static void ResolveDNSName()
    {
        Console.Clear();
        Console.Write("Enter the DNS name: ");
        string dnsName = Console.ReadLine();
        try
        {
            var addresses = Dns.GetHostAddresses(dnsName);
            foreach (var address in addresses)
            {
                Console.WriteLine(address);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
        Pause();
    }

    static void EncryptText()
    {
        Console.Clear();
        Console.Write("Enter text to encrypt: ");
        string text = Console.ReadLine();
        Console.Write("Enter shift value: ");
        if (int.TryParse(Console.ReadLine(), out int shift))
        {
            Console.WriteLine("Encrypted Text: " + CaesarCipher(text, shift));
        }
        else
        {
            Console.WriteLine("Invalid shift value.");
        }
        Pause();
    }

    static void DecryptText()
    {
        Console.Clear();
        Console.Write("Enter text to decrypt: ");
        string text = Console.ReadLine();
        Console.Write("Enter shift value: ");
        if (int.TryParse(Console.ReadLine(), out int shift))
        {
            Console.WriteLine("Decrypted Text: " + CaesarCipher(text, -shift));
        }
        else
        {
            Console.WriteLine("Invalid shift value.");
        }
        Pause();
    }

    static string CaesarCipher(string text, int shift)
    {
        return new string(text.Select(c =>
        {
            if (!char.IsLetter(c)) return c;
            char offset = char.IsUpper(c) ? 'A' : 'a';
            return (char)((c + shift - offset + 26) % 26 + offset);
        }).ToArray());
    }

    static void CompressFile()
    {
        Console.Clear();
        Console.Write("Enter the file path to compress: ");
        string filePath = Console.ReadLine();
        Console.Write("Enter the ZIP file name: ");
        string zipFileName = Console.ReadLine();
        try
        {
            using (var archive = ZipFile.Open(zipFileName, ZipArchiveMode.Create))
            {
                archive.CreateEntryFromFile(filePath, Path.GetFileName(filePath));
            }
            Console.WriteLine("File compressed successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
        Pause();
    }

    static void DecompressFile()
    {
        Console.Clear();
        Console.Write("Enter the ZIP file path: ");
        string zipFilePath = Console.ReadLine();
        Console.Write("Enter the extraction path: ");
        string extractionPath = Console.ReadLine();
        try
        {
            ZipFile.ExtractToDirectory(zipFilePath, extractionPath);
            Console.WriteLine("File decompressed successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
        Pause();
    }

    static void CalculateFileHash()
    {
        Console.Clear();
        Console.Write("Enter the file path: ");
        string filePath = Console.ReadLine();
        try
        {
            using (var md5 = MD5.Create())
            using (var sha256 = SHA256.Create())
            using (var stream = File.OpenRead(filePath))
            {
                Console.WriteLine("MD5: " + BitConverter.ToString(md5.ComputeHash(stream)).Replace("-", ""));
                stream.Seek(0, SeekOrigin.Begin);
                Console.WriteLine("SHA256: " + BitConverter.ToString(sha256.ComputeHash(stream)).Replace("-", ""));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
        Pause();
    }

    static void Pause()
    {
        Console.WriteLine("Press any key to continue...");
        Console.ReadKey();
    }
}
